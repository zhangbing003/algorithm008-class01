class Solution {
    private int[] parent;
    private int count;
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;
        int m = grid.length;
        int n = grid[0].length;
        parent = new int[m*n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1') {
                    parent[i*n+j] = i*n+j;
                    count++;
                }
            }
        }

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1') {
                    grid[i][j] = '0';
                    int curr = i*n+j;
                    // if (i-1 >= 0 && grid[i-1][j] == '1') {
                    //     union(curr, (i-1)*n+j);
                    // }
                    if (i+1 < m && grid[i+1][j] == '1') {
                        union(curr, (i+1)*n+j);
                    }
                    // if (j-1 >= 0 && grid[i][j-1] == '1') {
                    //     union(curr, i*n+j-1);
                    // }
                    if (j+1 < n && grid[i][j+1] == '1') {
                        union(curr, i*n+j+1);
                    }
                }
            }
        }
        return count;
    }

    private int find(int n) {
        while(parent[n] != n) {
            parent[n] = parent[parent[n]];
            n = parent[n];
        }
        return n;
    }

    private void union(int p, int q) {
        int rootP = find(p);
        int rootQ = find(q);
        if (rootP == rootQ) return;
        parent[rootQ] = rootP;
        count--;
    }
}