class TreeNode {
    public TreeNode[] nodes = new TreeNode[26];
    public String word;

    public boolean containsKey(char key) {
        return nodes[key - 'a'] != null;
    }

    public TreeNode get(char key) {
        return nodes[key - 'a'];
    }

    public void put(char key, TreeNode node) {
        nodes[key - 'a'] = node;
    }
}
class Trie {

    public TreeNode root;

    /** Initialize your data structure here. */
    public Trie() {
        root = new TreeNode();
    }

    /** Inserts a word into the trie. */
    public void insert(String word) {
        TreeNode node = root;
        for (char c : word.toCharArray()) {
            TreeNode subNode = node.get(c);
            if (subNode == null) {
                subNode = new TreeNode();
                node.put(c, subNode);
            }
            node = subNode;
        }
        node.word = word;
    }
}

class Solution {
    private List<String> res = new ArrayList();
    public List<String> findWords(char[][] board, String[] words) {
        if (words == null || words.length == 0 || board == null || board.length == 0) return res;
        Trie trie = new Trie();
        for (String word : words) {
            trie.insert(word);
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (trie.root.containsKey(board[i][j])) {
                    backtrace(board, i, j, trie.root.get(board[i][j]));
                }
            }
        }
        return res;
    }

    private void backtrace(char[][] board, int i, int j, TreeNode node) {
        if (node.word != null) {
            res.add(node.word);
            node.word = null;
        }
        char curr = board[i][j];
        board[i][j] = '#';
        int[] rows = {-1, 0, 1, 0};
        int[] cols = {0, -1, 0, 1};
        for (int k = 0; k < 4; k++) {
            int newRow = i + rows[k];
            int newCol = j + cols[k];
            if (newRow < 0 || newRow >= board.length || newCol < 0 || newCol >= board[0].length) {
                continue;
            }
            if (board[newRow][newCol] != '#' && node.containsKey(board[newRow][newCol])) {
                backtrace(board, newRow, newCol, node.get(board[newRow][newCol]));
            }
        }
        board[i][j] = curr;
    }
}