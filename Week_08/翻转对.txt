class Solution {
    public int reversePairs(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        return mergeSort(nums, 0, nums.length-1);
    }

    private int mergeSort(int[] nums, int begin, int end) {
        if (begin >= end) return 0;
        int mid = (begin + end) >> 1;
        int count = mergeSort(nums, begin, mid) + mergeSort(nums, mid+1, end);
        int[] cache = new int[end-begin+1];
        int l = begin, c = begin, k = 0;
        for (int r = mid+1; r <= end; r++, k++) {
            while(l <= mid && nums[l] <= (long)nums[r]*2) l++;
            while(c <= mid && nums[c] < nums[r]) cache[k++] = nums[c++];
            cache[k] = nums[r];
            count += mid - l + 1;
        }
        while(c <= mid) cache[k++] = nums[c++];
        System.arraycopy(cache, 0, nums, begin, end - begin + 1);
        return count;
    }
}